tosca_definitions_version: cloudify_dsl_1_3

description: >
  This blueprint installs a simple web server on a pre-existing machine.
  IMPORTANT: The VM being used must be associated with a security group (or multiple security groups)
  that, cumulatively, allows TCP access via the port specified by the "webserver_port" input (defaults to 8080),
  as well as TCP access for the Cloudify Agent installation process.

imports:
  - http://www.getcloudify.org/spec/cloudify/4.1m1/types.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.5/plugin.yaml
  - include/inputs.yaml

inputs:
  server_ip:
    description: >
      The ip of the machine that the application will be installed on.
  agent_user:
    description: >
      User account used when SSH-ing into the existing machine for the purpose
      of Cloudify Agent installation.
  agent_private_key_path:
    description: >
      Path to a private key to use when SSH-ing into the existing machine for
      agent installation. This path must be available on the machine that is executing the
      installation workflow (that is, the Cloudify Manager machine in a managed environment,
      or the local machine in a local invocation).

node_templates:
  vm:
    type: cloudify.nodes.Compute
    properties:
      ip: { get_input: server_ip }
      agent_config:
        user: { get_input: agent_user }
        key: { get_input: agent_private_key_path }
    interfaces:
      cloudify.interfaces.monitoring_agent:
        install:
          implementation: diamond.diamond_agent.tasks.install
          inputs:
            diamond_config:
              interval: 1
        start: diamond.diamond_agent.tasks.start
        stop: diamond.diamond_agent.tasks.stop
        uninstall: diamond.diamond_agent.tasks.uninstall
      cloudify.interfaces.monitoring:
        start:
          implementation: diamond.diamond_agent.tasks.add_collectors
          inputs:
            collectors_config:
                CPUCollector: {}
                MemoryCollector: {}
                LoadAverageCollector: {}
                DiskUsageCollector:
                  config:
                    devices: x?vd[a-z]+[0-9]*$
                NetworkCollector: {}
  http_web_server:
    type: cloudify.nodes.WebServer
    properties:
      port: { get_input: webserver_port }
    relationships:
      - type: cloudify.relationships.contained_in
        target: vm
    interfaces:
      cloudify.interfaces.lifecycle:
        configure: scripts/configure.sh
        start: scripts/start.sh
        stop: scripts/stop.sh

outputs:
  http_endpoint:
    description: Web server external endpoint
    value: { concat: ['http://', { get_property: [ vm, ip ] },
                      ':', { get_property: [http_web_server, port] }] }
