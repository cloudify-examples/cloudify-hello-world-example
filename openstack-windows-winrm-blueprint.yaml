tosca_definitions_version: cloudify_dsl_1_3

description: >
  The blueprint installs a simple web server on a Linux virtual machine under OpenStack.
  Other than a VM, this blueprint creates a keypair, a security group, and a floating IP for the application.
  This blueprint assumes that a security group for Cloudify Agents already exists; its name should
  be provided for the "agents_security_group" input.
  The Windows VM's agent installation process is done using WinRM. The userdata passed to the new VM
  ensures that WinRM is configured in a way that is compatible with Cloudify's agent installation process.
  This approach should only be used in special cases; it is recommended to use the "init_script" approach which
  is demonstrated in "openstack-windows-blueprint.yaml".

imports:
  - http://www.getcloudify.org/spec/cloudify/4.1m1/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/2.0.1/plugin.yaml
  - include/openstack-inputs.yaml
  - include/inputs.yaml
  - include/scaling.yaml

inputs:
  agent_user:
    description: User name used when SSH-ing into the started machine
  agent_key_pair_name:
    default: 'hello-world'
    description: Openstack key pair name of the key to associate with the new server
  agent_private_key_path:
    default: '~/hw.pem'
    description: |
      Path to the private key which will be used for connecting to the server
      on the manager or machine running CLI if running in local mode.

dsl_definitions:
  openstack_configuration: &openstack_configuration
    username: { get_input: keystone_username }
    password: { get_input: keystone_password }
    tenant_name: { get_input: keystone_tenant_name }
    auth_url: { get_input: keystone_url }
    region: { get_input: region }

node_templates:
  public_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_configuration
      floatingip:
        floating_network_name: { get_input: floating_network_name }

  agents_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_configuration
      resource_id: { get_input: agents_security_group_name }
      rules:
        - port: 22
          remote_ip_prefix: 0.0.0.0/0
        - port_range_min: 5985
          port_range_max: 5986
          remote_ip_prefix: 0.0.0.0/0

  app_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_configuration
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [ http_web_server, port ] }

  keypair:
    type: cloudify.openstack.nodes.KeyPair
    properties:
      openstack_config: *openstack_configuration
      resource_id: { get_input: agent_key_pair_name }
      private_key_path: { get_input: agent_private_key_path }

  vm:
    type: cloudify.openstack.nodes.WindowsServer
    properties:
      openstack_config: *openstack_configuration
      agent_config:
        user: { get_input: agent_user }
      image: { get_input: image }
      flavor: { get_input: flavor }
      management_network_name: { get_input: network_name }
      server:
        userdata: |
          #ps1_sysnative
          winrm quickconfig -q
          winrm set winrm/config              '@{MaxTimeoutms="1800000"}'
          winrm set winrm/config/winrs        '@{MaxMemoryPerShellMB="300"}'
          winrm set winrm/config/service      '@{AllowUnencrypted="true"}'
          winrm set winrm/config/service/auth '@{Basic="true"}'
          &netsh advfirewall firewall add rule name="WinRM 5985" protocol=TCP dir=in localport=5985 action=allow
          &netsh advfirewall firewall add rule name="WinRM 5986" protocol=TCP dir=in localport=5986 action=allow 		
    relationships:
      - type: cloudify.openstack.server_connected_to_keypair
        target: keypair
      - type: cloudify.openstack.server_connected_to_floating_ip
        target: public_ip
      - type: cloudify.openstack.server_connected_to_security_group
        target: app_security_group
      - type: cloudify.openstack.server_connected_to_security_group
        target: agents_security_group
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              # Needed until JIRA issue OPENSTACK-38 is resolved.
              security_groups:
                - { get_attribute: [ agents_security_group, external_name ]}
                - { get_attribute: [ app_security_group, external_name ]}

  http_web_server:
    type: cloudify.nodes.WebServer
    properties:
      port: { get_input: webserver_port }
    relationships:
      - type: cloudify.relationships.contained_in
        target: vm
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: scripts/powershell/configure.ps1
          inputs:
            process:
              command_prefix: powershell
        start:
          implementation: scripts/powershell/start.ps1
          inputs:
            process:
              command_prefix: powershell
        stop:
          implementation: scripts/powershell/stop.ps1
          inputs:
            process:
              command_prefix: powershell

outputs:
  http_endpoint:
    description: Web server external endpoint
    value: { concat: ['http://', { get_attribute: [public_ip, floating_ip_address] },
                      ':', { get_property: [http_web_server, port] }] }
