tosca_definitions_version: cloudify_dsl_1_3

description: >
  The blueprint installs a simple web server on a Linux virtual machine under OpenStack.
  Other than a VM, this blueprint creates a keypair, a security group, and a floating IP for the application.
  This blueprint assumes that a security group for Cloudify Agents already exists; its name should
  be provided for the "agents_security_group" input.

imports:
  - http://www.getcloudify.org/spec/cloudify/4.1m1/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/2.0.1/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.5/plugin.yaml
  - include/openstack-inputs.yaml
  - include/inputs.yaml
  - include/scaling.yaml

inputs:
  agent_user:
    description: >
      User account used when SSH-ing into the existing machine for the purpose
      of Cloudify Agent installation.
  agent_key_pair_name:
    default: 'hello-world'
    description: Openstack key pair name of the key to associate with the new server
  agent_private_key_path:
    default: '~/hw.pem'
    description: |
      Path to the private key which will be used for connecting to the server
      on the manager or machine running CLI if running in local mode.

dsl_definitions:
  openstack_configuration: &openstack_configuration
    username: { get_input: keystone_username }
    password: { get_input: keystone_password }
    tenant_name: { get_input: keystone_tenant_name }
    auth_url: { get_input: keystone_url }
    region: { get_input: region }

node_templates:
  public_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_configuration
      floatingip:
        floating_network_name: { get_input: floating_network_name }

  agents_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_configuration
      resource_id: { get_input: agents_security_group_name }
      rules:
        - port: 22
          remote_ip_prefix: 0.0.0.0/0
        - port_range_min: 5985
          port_range_max: 5986
          remote_ip_prefix: 0.0.0.0/0

  app_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_configuration
      rules:
        - port: { get_property: [ http_web_server, port ] }
          remote_ip_prefix: 0.0.0.0/0

  keypair:
    type: cloudify.openstack.nodes.KeyPair
    properties:
      openstack_config: *openstack_configuration
      resource_id: { get_input: agent_key_pair_name }
      private_key_path: { get_input: agent_private_key_path }

  vm:
    type: cloudify.openstack.nodes.Server
    properties:
      openstack_config: *openstack_configuration
      agent_config:
        user: { get_input: agent_user }
        key: { get_property: [ keypair, private_key_path ] }
      image: { get_input: image }
      flavor: { get_input: flavor }
      management_network_name: { get_input: network_name }
    relationships:
      - type: cloudify.openstack.server_connected_to_keypair
        target: keypair
      - type: cloudify.openstack.server_connected_to_floating_ip
        target: public_ip
      - type: cloudify.openstack.server_connected_to_security_group
        target: agents_security_group
      - type: cloudify.openstack.server_connected_to_security_group
        target: app_security_group
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              # Needed until JIRA issue OPENSTACK-38 is resolved.
              security_groups:
                - { get_attribute: [ agents_security_group, external_name ]}
                - { get_attribute: [ app_security_group, external_name ]}
      cloudify.interfaces.monitoring_agent:
        install:
          implementation: diamond.diamond_agent.tasks.install
          inputs:
            diamond_config:
              interval: 1
        start: diamond.diamond_agent.tasks.start
        stop: diamond.diamond_agent.tasks.stop
        uninstall: diamond.diamond_agent.tasks.uninstall
      cloudify.interfaces.monitoring:
        start:
          implementation: diamond.diamond_agent.tasks.add_collectors
          inputs:
            collectors_config:
              CPUCollector: {}
              MemoryCollector: {}
              LoadAverageCollector: {}
              DiskUsageCollector:
                config:
                  devices: x?vd[a-z]+[0-9]*$
              NetworkCollector: {}
 
  http_web_server:
    type: cloudify.nodes.WebServer
    properties:
      port: { get_input: webserver_port }
    relationships:
      - type: cloudify.relationships.contained_in
        target: vm
    interfaces:
      cloudify.interfaces.lifecycle:
        configure: scripts/configure.sh
        start: scripts/start.sh
        stop: scripts/stop.sh

outputs:
  http_endpoint:
    description: Web server external endpoint
    value: { concat: ['http://', { get_attribute: [public_ip, floating_ip_address] },
                      ':', { get_property: [http_web_server, port] }] }
